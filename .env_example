# ===========================================================================
# 1. Core AI & Cloud Service Configuration
# ===========================================================================

# --- OpenAI API Configuration ---
# Your API key from OpenAI. Ensure this is kept secret.
# Recommended: Set OPENAI_API_KEY directly in your local .env file.
# Example: OPENAI_API_KEY=sk-your_openai_api_key_here
# Get your key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your_openai_api_key_here

# Specify which OpenAI models to use for embeddings and chat completions.
# Ensure these model names are valid and available in your OpenAI account.
OPENAI_EMBEDDING_MODEL=text-embedding-3-small
OPENAI_LLM_MODEL=gpt-3.5-turbo # Or gpt-4, gpt-4-turbo, etc.

# ===========================================================================
# 2. Vector Database Configuration
# ===========================================================================

# --- Chroma DB Configuration ---
# For local experimentation and development, Chroma DB is often used
# directly within the application's process or managed by a simple Docker instance.
# It doesn't require separate API keys or a dedicated service to start with.
# Data can be stored in-memory (lost on restart) or persistently in a directory.
# If you choose persistent storage, you'll manage the directory path within your app code.
# e.g., CHROMA_PERSIST_DIR = "./chroma_data"

# ===========================================================================
# 3. Object Storage Configuration (MinIO as S3 Replacement)
# ===========================================================================

# --- MinIO Configuration ---
# MinIO is used here as an S3-compatible object storage for your source documents,
# processed files, etc. It's self-hosted and open-source (free).

# Endpoint URL for your MinIO instance.
# For local development via Docker Compose, this is typically the service name and port.
# If running outside Docker, use localhost:port.
# Example: AWS_ENDPOINT_URL=http://minio:9000  (if MinIO service is named 'minio')
# Example: AWS_ENDPOINT_URL=http://localhost:9000 (if running MinIO directly or accessing host)
AWS_ENDPOINT_URL=http://localhost:9000

# MinIO Access Key ID and Secret Access Key.
# These are for authenticating with your MinIO instance.
# They should match the MINIO_ROOT_USER and MINIO_ROOT_PASSWORD set in your docker-compose.yml.
# !!! IMPORTANT: CHANGE THESE DEFAULTS FOR PRODUCTION USE !!!
AWS_ACCESS_KEY_ID=minioadmin
AWS_SECRET_ACCESS_KEY=minioadmin

# The name of the bucket where your source documents will be stored in MinIO.
# This bucket must exist in your MinIO instance.
S3_BUCKET_NAME=enterprise-data

# AWS Region: While MinIO isn't tied to AWS regions, boto3 often requires a region.
# For MinIO, you can often use a dummy value like 'us-east-1'.
AWS_REGION=us-east-1

# ===========================================================================
# 4. Database Configuration (for Chat History & Airflow Metadata)
# ===========================================================================

# --- PostgreSQL Configuration ---
# Used for storing chat history and potentially Airflow's metadata database.
# These are connection details for your PostgreSQL instance.
# If using docker-compose, POSTGRES_HOST should match the service name.

POSTGRES_USER=your_postgres_user # Replace with your PostgreSQL username
POSTGRES_PASSWORD=your_postgres_password # Replace with your PostgreSQL password
POSTGRES_DB=rag_chat_db # Name of your chat history database
POSTGRES_HOST=postgresql # Service name in docker-compose (or localhost if not using docker)
POSTGRES_PORT=5432 # Default PostgreSQL port

# ===========================================================================
# 5. Caching Configuration
# ===========================================================================

# --- Redis Configuration ---
# Used for caching frequently accessed data to improve performance.
# These are connection details for your Redis instance.
# If using docker-compose, REDIS_HOST should match the service name.

REDIS_HOST=redis # Service name in docker-compose (or localhost if not using docker)
REDIS_PORT=6379 # Default Redis port
# REDIS_PASSWORD=your_redis_password # Uncomment and set if your Redis instance requires authentication

# ===========================================================================
# 6. Application Runtime Configuration
# ===========================================================================

# --- FastAPI Service URL ---
# This is the URL your frontend (e.g., Streamlit) will use to communicate
# with the FastAPI backend.
# If running Streamlit outside Docker and FastAPI inside Docker Compose:
# FASTAP_URL=http://localhost:8000
# If running both inside Docker Compose and accessing from host:
# FASTAP_URL=http://localhost:8000 (as the host machine exposes the port)
# If Streamlit is also in a container and communicating directly:
# FASTAP_URL=http://fastapi_app:8000 (replace fastapi_app with your service name)
FASTAP_URL=http://localhost:8000

# --- Airflow Configuration ---
# If your application code directly needs Airflow credentials or connection details,
# uncomment and configure these. Often, Airflow manages its own connections internally.
# AIRFLOW_USERNAME=airflow
# AIRFLOW_PASSWORD=airflow
# AIRFLOW_WEBSERVER_URL=http://localhost:8080 # Or your Airflow service URL